'''A bracket is considered to be any one of the following characters: (, ), {, }, [, or ].

Two brackets are considered to be a matched pair if the an opening bracket (i.e., (, [, or {) occurs to the left of a closing bracket (i.e., ), ], or }) of the exact same type. There are three types of matched pairs of brackets: [], {},and ().

A matching pair of brackets is not balanced if the set of brackets it encloses are not matched. For example, {[(])} is not balanced because the contents in between { and } are not balanced. The pair of square brackets encloses a single, unbalanced opening bracket, (, and the pair of parentheses encloses a single, unbalanced closing square bracket, ].

By this logic, we say a sequence of brackets is balanced if the following conditions are met:

It contains no unmatched brackets.
The subset of brackets enclosed within the confines of a matched pair of brackets is also a matched pair of brackets.
Given n strings of brackets, determine whether each sequence of 
brackets is balanced. If a string is balanced, return YES. Otherwise, return NO.


INPUT:

The first line contains a single integer n, the number of strings. 

Each of the next n lines contains a single string s, a sequence of brackets.
Solution:'''

i= int(input())
for o in range(i):
 l=list(input())
 br=['{','}','[',']','(',')']
 s=[]
 f=1

 for i in range(0,len(l)):
  '''if(s1.pop()==(br[0])):
     print()
    print(s1)
    print('y')'''
  if(l[i]==br[0] or l[i]==br[2] or l[i]==br[4]):
      s.append(l[i])



  elif(s!=[] and ((l[i]==br[1] and s[len(s)-1]==br[0]) or (l[i]==br[3] and s[len(s)-1]==br[2]) or (l[i]==br[5] and s[len(s)-1]==br[4]))) :
        s.pop()
        #print(len(s))
  else:
        f=0
        break
 
 if(f==1 and s==[]):
  print('YES')
 else:
  print("NO")

